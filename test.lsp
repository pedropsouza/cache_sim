(load "cache-sim.lsp")
(defparameter *sim* (new-cache-sim :addr-bits 8 :cache-bits 2))
(setf *random-state* (seed-random-state 42))
(princ "###")
(prog )
(dotimes (i 200)
  (let ((addr (random (expt 2 8))))
    (let ((res (cache-sim-access *sim* addr))
          (fmtstr 
            (format nil "~~&~~~dd = ~~~d,'0b got a ~~a with value ~~d~~%~~a"
                  (ceiling (log (expt 2 (cache-sim-addr-bits *sim*))) (log 10))
                  (ceiling (log (expt 2 (cache-sim-addr-bits *sim*))) (log 2))
              )
            )
          )
      (progn
        (fresh-line)
        (format t fmtstr addr addr (car res) (cdr res) (cache-sim-cache-cells *sim*))
        )
      )
    )
  )
(let ((h (cache-sim-hit-count *sim*))
      (c (cache-sim-op-count *sim*)))
  (format t "~&the hit ratio is ~d/~d = ~,4f"
    h c (/ h c)
    )
  )
