(load "full.lsp")
(defparameter *addr-bits* 16)
;(defparameter *cache-bits-list* '(1 2 3))
(prog ((l1 (new-cache-sim :addr-bits *addr-bits* :cache-bits 5 :block-bits 4))
       (l2 (new-cache-sim :addr-bits *addr-bits* :cache-bits 6 :block-bits 4))
       (l3 (new-cache-sim :addr-bits *addr-bits* :cache-bits 8 :block-bits 4)))
  (setf *random-state* (seed-random-state 42))
  (princ "###")
  (dotimes (i 10000)
    (let (;(addr (random (expt 2 16))))
          (addr i))
      (flet ((lookup (cache)
                (let ((res (cache-sim-access cache addr)))
                  (if (eq (car res) 'hit)
                    res
                    nil))))
        (let ((fmtstr 
            (format nil "~~&~~~dd = ~~~d,'0b got a ~~a with value ~~d~~%~~a"
                  (ceiling (log (expt 2 (cache-sim-addr-bits l1))) (log 10))
                  (ceiling (log (expt 2 (cache-sim-addr-bits l1))) (log 2))
              )))
          (prog ((res nil))
            (fresh-line)
            (setq res (or (lookup l1) (lookup l2) (lookup l3) '(:MISS :unknown)))
            (format t fmtstr addr addr (car res) (cdr res)
                    nil);(cache-sim-mem-cells l1))
            )
          )
        )
      )
    )
  (flet ((print-stats (level name)
          (let ((h (cache-sim-hit-count level))
                (c (cache-sim-op-count level)))
            (format t "~&the hit ratio for ~a is ~d/~d = ~,4f"
              name h c (/ h c)))))
    (progn
      (print-stats l1 "L1")
      (print-stats l2 "L2")
      (print-stats l3 "L3")
      )
    )
  )

